[package]
name = "tinyvec"
description = "Just, really the littlest Vec you could need. So smol."
version = "1.0.0-alpha.0"
authors = ["Lokathor <zefria@gmail.com>"]
edition = "2018"
license = "Zlib OR Apache-2.0 OR MIT"
keywords = ["vec", "no_std", "no-std", "smol"]
categories = ["data-structures", "no-std"]
repository = "https://github.com/Lokathor/tinyvec"

[dependencies]
tinyvec_macros = { version = "0.1", optional = true }

[features]
default = []

# Provide things that utilize the `alloc` crate, namely `TinyVec`.
alloc = ["tinyvec_macros"]

# (not part of Vec!) Extra methods to let you grab the slice of memory after the
# "active" portion of an `ArrayVec` or `SliceVec`.
grab_spare_slice = []

# features that require rustc 1.40
# use Vec::append if possible in TinyVec::append - 1.37
# DoubleEndedIterator::nth_back - 1.40
rustc_1_40 = []

# allow use of nightly feature `slice_partition_dedup`,
# will become useless once that is stabilized:
# https://github.com/rust-lang/rust/issues/54279
nightly_slice_partition_dedup = []

# use const generics for arrays
nightly_const_generics = []

# EXPERIMENTAL: Not part of SemVer. It adds `core::fmt::Write` to `ArrayVec`
# and `SliceVec`. It works on Stable Rust, but Vec normally supports the
# `std::io::Write` trait instead of `core::fmt::Write`, so we're keeping it as
# an experimental impl only for now.
experimental_write_impl = []

[package.metadata.docs.rs]
all-features = true

[profile.test]
opt-level = 3

[workspace]
members = ["fuzz"]

[dev-dependencies]
criterion = "0.3.0"

[[test]]
name = "tinyvec"
required-features = ["alloc"]

[[bench]]
name = "macros"
harness = false
required-features = ["alloc"]
